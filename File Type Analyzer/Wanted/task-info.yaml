type: edu
custom_name: Wanted!
files:
- name: src/analyzer/Main.java
  visible: true
  text: |
    package analyzer;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/Clue.java
  visible: false
  text: |
    public class Clue {
        public String output;
        public int threadsStarted;
        public String feedback;

        public Clue(String output, int threadsStarted, String feedback) {
            this.output = output;
            this.threadsStarted = threadsStarted;
            this.feedback = feedback;
        }

    }
  learner_created: false
- name: test/MainTest.java
  visible: false
  text: |2

    import analyzer.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.lang.management.ManagementFactory;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.List;
    import java.util.function.Function;

    public class MainTest extends StageTest<Clue> {
        private static final String CURRENT_DIR = System.getProperty("user.dir") + File.separator;
        private static int startedThreadCount = 0;

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                    //Testing basic cases
                    new TestCase<Clue>()
                            .addArguments(new String[]
                                    {"test_files", "%PDF-", "PDF document"})
                            .addFile("test_files" + File.separator + "doc.pdf", "PFDF%PDF-PDF")
                            .addFile("test_files" + File.separator + "text.txt", "PF%PDF-PDFABC")
                            .setAttach(new Clue("doc.pdf: PDF document\n" +
                                    "text.txt: PDF document", 2, "The files had following content: " + "\n" +
                                    "\"PFDF%PDF-PDF\", \"PF%PDF-PDFABC\" and were analyzed for pattern \"%PDF-\"")),

                    new TestCase<Clue>()
                            .addArguments(new String[]
                                    {"test_files", "-----BEGIN\\CERTIFICATE-----", "PEM certificate"})
                            .addFile("test_files" + File.separator + "file.pem", "PF-----BEGIN\\CERTIFICATE-----DF%PDF-PDF")
                            .addFile("test_files" + File.separator + "file.pdf", "PF%P-----BEGIN\\CERTIFICATE-----DF-PDF")
                            .setAttach(new Clue("file.pdf: PEM certificate\n" +
                                    "file.pem: PEM certificate", 2, "")),

                    //Testing with only one file in the directory
                    new TestCase<Clue>()
                            .addArguments(new String[]
                                    {"test_files", "-----BEGIN\\CERTIFICATE-----", "PEM certificate"})
                            .addFile("test_files" + File.separator + "the_only_file.pem", "PF-----BEGIN\\CERTIFICATE-----DF%PDF-PDF")
                            .setAttach(new Clue("the_only_file.pem: PEM certificate", 1, "")),

                    //Testing with 10 files in the directory
                    new TestCase<Clue>()
                            .addArguments(new String[]
                                    {"test_files", "%txt-", "TXT document"})
                            .addFile("test_files" + File.separator + "doc0.pdf", "PFDF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc1.pdf", "PF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc2.pdf", "PFDF%PDF%txt-PF")
                            .addFile("test_files" + File.separator + "doc3.pdf", "PF%PF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc4.pdf", "PFDF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc5.pdf", "PF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc6.pdf", "PFF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc7.pdf", "PF%DF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc8.pdf", "PFDF%PDFPDF")
                            .addFile("test_files" + File.separator + "doc9.txt", "PF%PDF%PDF")
                            .setAttach(new Clue("doc0.pdf: TXT document\n" +
                                    "doc1.pdf: TXT document\n" +
                                    "doc2.pdf: TXT document\n" +
                                    "doc3.pdf: TXT document\n" +
                                    "doc4.pdf: TXT document\n" +
                                    "doc5.pdf: TXT document\n" +
                                    "doc6.pdf: TXT document\n" +
                                    "doc7.pdf: TXT document\n" +
                                    "doc8.pdf: Unknown file type\n" +
                                    "doc9.txt: Unknown file type", 10, ""))
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {
            long currentThreads = ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();
            long startedThisTestThread = currentThreads - startedThreadCount;

            long neededThreads = startedThreadCount + clue.threadsStarted;
            long startedThisTestNeededThreads = neededThreads - startedThreadCount;

            Function<Long, String> threadName = count ->
                    count + " thread" + (count == 1 ? "" : "s");

            if (startedThisTestThread < startedThisTestNeededThreads) {
                return CheckResult.wrong(
                        "There were not enough Threads started, " +
                                "you should process each file in a different Thread. " +
                                "\nYou started " + threadName.apply(startedThisTestThread) + ", " +
                                "but you need to start " + threadName.apply(startedThisTestNeededThreads) + ". " +
                                "\nThe executor.invokeAll() method might help. Also, don't forget to call .shutdown()."
                );
            }

            startedThreadCount = (int) currentThreads;

            String[] expectedLines = clue.output.split("\n");
            String actual = reply.strip();

            if (actual.isEmpty()) {
                return CheckResult.wrong("No output (check if you exited " +
                        "from main too early, you should wait until all threads are finishes)");
            }

            int expectedLinesLength = expectedLines.length;

            if (actual.trim().split("\n").length != expectedLines.length) {
                return CheckResult.wrong(String.format("There is should be %d lines in the output when you check %d files!\nMake sure you don't print empty lines.", expectedLinesLength, expectedLinesLength));
            }

            for (String expectedLine : expectedLines) {
                if (!actual.toLowerCase().contains(expectedLine.toLowerCase())) {
                    return new CheckResult(false, "Can't find the line '"
                            + expectedLine + "' in the output!");
                }
            }

            return CheckResult.correct();
        }

        @BeforeClass
        public static void generateTestFilesDirectory() {
            try {
                Files.deleteIfExists(Paths.get(CURRENT_DIR + "test_files"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            try {
                Files.createDirectory(Paths.get(CURRENT_DIR + "test_files"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

        @BeforeClass
        public static void countThreadsBefore() {
            startedThreadCount += ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();
        }

        @AfterClass
        public static void deleteTestFilesDirectory() {
            try {
                Files.deleteIfExists(Paths.get(CURRENT_DIR + "test_files"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

    }
  learner_created: false
- name: src/analyzer/substring/finder/SubstringFinder.java
  visible: true
  text: |
    package analyzer.substring.finder;

    public interface SubstringFinder {
        Boolean search(String pattern, String text);
    }
  learner_created: true
- name: src/analyzer/FileTypeChecker.java
  visible: true
  text: |
    package analyzer;

    import analyzer.substring.finder.SubstringFinder;

    import java.io.FileInputStream;
    import java.io.FileNotFoundException;
    import java.io.IOException;
    import java.io.InputStream;

    public class FileTypeChecker {
        SubstringFinder algorithm;

        void search(String path, String pattern, String result) {
            try (InputStream inputStream = new FileInputStream(path)) {
                var bytes = inputStream.readAllBytes();
                var text = new String(bytes);

                // start time
                long startTime = System.nanoTime();

                if (algorithm.search(pattern, text)) {
                    System.out.println(result);
                } else {
                    System.out.println("Unknown file type");
                }

                // end time
                long endTime = System.nanoTime();
                System.out.println("Time taken: " + (endTime - startTime) / 1000000000.0 + " seconds");
            } catch (FileNotFoundException e) {
                throw new RuntimeException(e);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }

        public void setAlgorithm(SubstringFinder algorithm) {
            this.algorithm = algorithm;
        }
    }
  learner_created: true
- name: src/analyzer/substring/finder/NaiveSearch.java
  visible: true
  text: |
    package analyzer.substring.finder;

    // Just use the built-in String.contains() method
    public class NaiveSearch implements SubstringFinder {
        @Override
        public Boolean search(String pattern, String text) {
            return text.contains(pattern);
        }
    }
  learner_created: true
- name: src/analyzer/substring/finder/KMP.java
  visible: true
  text: |
    package analyzer.substring.finder;

    import analyzer.substring.helper.PrefixFunction;

    // The Knuth-Morris-Pratt algorithm
    public class KMP implements SubstringFinder {
        /**
         * The Knuth-Morris-Pratt algorithm
         * For arbitrary pattern s and text t, the KMP algorithm can be formulated as follows:
         * 1. Calculate the prefix function p for the pattern s
         * 2. Set the first substring of the text with length |s| as current.
         * 3. Compare the pattern with the current substring of the text. If all symbols match, save the index of the found occurrence.
         * Otherwise, shift the pattern by L - p[L - 1] symbols, where L is the length of the matched substring of the pattern.
         * 4. Continue step 3 until all substrings of the text are processed. Then, return the found occurrences.
         */
        @Override
        public Boolean search(String pattern, String text) {
            int[] prefixFunction = PrefixFunction.calculate(pattern);
            int j = 0;
            for (int i = 0; i < text.length(); i++) {
                while (j > 0 && text.charAt(i) != pattern.charAt(j)) {
                    j = prefixFunction[j - 1];
                }
                if (text.charAt(i) == pattern.charAt(j)) {
                    j++;
                }
                if (j == pattern.length()) {
                    return true;
                }
            }
            return false;
        }
    }
  learner_created: true
- name: src/analyzer/substring/helper/PrefixFunction.java
  visible: true
  text: |
    package analyzer.substring.helper;

    public class PrefixFunction {

        private PrefixFunction() {
        }

        /**
         * Calculate the prefix function of a string of a length n using these steps:
         * 1. Set p[0] = 0. Do the following for every i from 0 to n - 1:
         * 2. Define j = p[i-1]
         * 3. If s[j] = s[i], set p[i] = j + 1.
         * 4. Otherwise, take j = p[j - 1] and repeat step 3. If we reach j = 0 and there is no match,
         * we conclude that p[i] = 0.
         */
        public static int[] calculate(String pattern) {
            int[] prefixFunction = new int[pattern.length()];
            prefixFunction[0] = 0;
            for (int i = 1; i < pattern.length(); i++) {
                int j = prefixFunction[i - 1];
                while (j > 0 && pattern.charAt(i) != pattern.charAt(j)) {
                    j = prefixFunction[j - 1];
                }
                if (pattern.charAt(i) == pattern.charAt(j)) {
                    j++;
                }
                prefixFunction[i] = j;
            }
            return prefixFunction;
        }
    }
  learner_created: true
- name: test_files/doc8.pdf
  visible: true
  learner_created: true
- name: test_files/doc3.pdf
  visible: true
  learner_created: true
- name: test_files/doc9.txt
  visible: true
  learner_created: true
- name: test_files/doc7.pdf
  visible: true
  learner_created: true
- name: test_files/doc6.pdf
  visible: true
  learner_created: true
- name: test_files/doc5.pdf
  visible: true
  learner_created: true
- name: test_files/doc4.pdf
  visible: true
  learner_created: true
- name: test_files/doc2.pdf
  visible: true
  learner_created: true
- name: test_files/doc1.pdf
  visible: true
  learner_created: true
- name: test_files/doc0.pdf
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5487#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 21 Mar 2023 01:02:58 UTC"
record: -1
